
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066b  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ac  00000000  00000000  00000807  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000330  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000306  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	06 d0       	rcall	.+12     	; 0x40 <main>
  34:	2d c0       	rjmp	.+90     	; 0x90 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <port_ini>:

#include "main.h"


void port_ini(void){
	PORTB = 0x00;
  38:	18 ba       	out	0x18, r1	; 24
	DDRB = 0b00001000;
  3a:	88 e0       	ldi	r24, 0x08	; 8
  3c:	87 bb       	out	0x17, r24	; 23
  3e:	08 95       	ret

00000040 <main>:
}

int main(void)
{
	unsigned char pwm_state = 0;
    port_ini();
  40:	fb df       	rcall	.-10     	; 0x38 <port_ini>
	init_PWM_timer();
  42:	1e d0       	rcall	.+60     	; 0x80 <init_PWM_timer>
	OCR2 = 50;
  44:	82 e3       	ldi	r24, 0x32	; 50
  46:	83 bd       	out	0x23, r24	; 35
	DDRB = 0b00001000;
}

int main(void)
{
	unsigned char pwm_state = 0;
  48:	80 e0       	ldi	r24, 0x00	; 0
			OCR2++;
			if(OCR2 > 254) pwm_state = 1;
		}
		else{
			OCR2--;
			if(OCR2 < 1) pwm_state = 0;
  4a:	20 e0       	ldi	r18, 0x00	; 0
	init_PWM_timer();
	OCR2 = 50;
    while (1){
		if(!pwm_state){
			OCR2++;
			if(OCR2 > 254) pwm_state = 1;
  4c:	31 e0       	ldi	r19, 0x01	; 1
	unsigned char pwm_state = 0;
    port_ini();
	init_PWM_timer();
	OCR2 = 50;
    while (1){
		if(!pwm_state){
  4e:	81 11       	cpse	r24, r1
  50:	09 c0       	rjmp	.+18     	; 0x64 <main+0x24>
			OCR2++;
  52:	83 b5       	in	r24, 0x23	; 35
  54:	8f 5f       	subi	r24, 0xFF	; 255
  56:	83 bd       	out	0x23, r24	; 35
			if(OCR2 > 254) pwm_state = 1;
  58:	93 b5       	in	r25, 0x23	; 35
  5a:	83 2f       	mov	r24, r19
  5c:	9f 3f       	cpi	r25, 0xFF	; 255
  5e:	49 f0       	breq	.+18     	; 0x72 <main+0x32>
  60:	82 2f       	mov	r24, r18
  62:	07 c0       	rjmp	.+14     	; 0x72 <main+0x32>
		}
		else{
			OCR2--;
  64:	93 b5       	in	r25, 0x23	; 35
  66:	91 50       	subi	r25, 0x01	; 1
  68:	93 bd       	out	0x23, r25	; 35
			if(OCR2 < 1) pwm_state = 0;
  6a:	93 b5       	in	r25, 0x23	; 35
  6c:	91 11       	cpse	r25, r1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <main+0x32>
  70:	82 2f       	mov	r24, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	ef e0       	ldi	r30, 0x0F	; 15
  74:	f7 e2       	ldi	r31, 0x27	; 39
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <main+0x36>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <main+0x3c>
  7c:	00 00       	nop
  7e:	e7 cf       	rjmp	.-50     	; 0x4e <main+0xe>

00000080 <init_PWM_timer>:
 *  Author: Роман
 */ 
#include "PWM.h"

void init_PWM_timer(void){
	ASSR = 0x00;
  80:	12 bc       	out	0x22, r1	; 34
	TCCR2 = 0b01101110; //Fast PWM, Clear OC2 on Compare Match, clkT2S/256 (From Prescaler) (реальная частота получится 8мгц/256 = 31250 Гц)
  82:	8e e6       	ldi	r24, 0x6E	; 110
  84:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00; // Timer Value = 0
  86:	14 bc       	out	0x24, r1	; 36
	OCR2 = 0;//Скважность 0
  88:	13 bc       	out	0x23, r1	; 35
	TIMSK |= 0x00; //
  8a:	89 b7       	in	r24, 0x39	; 57
  8c:	89 bf       	out	0x39, r24	; 57
  8e:	08 95       	ret

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
