
LCD1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bab  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b2  00000000  00000000  00000e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d0  00000000  00000000  00001541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000536  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002372  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e7       	ldi	r30, 0x76	; 118
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	85 d0       	rcall	.+266    	; 0x154 <main>
  4a:	93 c0       	rjmp	.+294    	; 0x172 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <sendhalfbyte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	93 9a       	sbi	0x12, 3	; 18
  50:	95 e8       	ldi	r25, 0x85	; 133
  52:	9a 95       	dec	r25
  54:	f1 f7       	brne	.-4      	; 0x52 <sendhalfbyte+0x4>
  56:	00 00       	nop
  58:	92 b3       	in	r25, 0x12	; 18
  5a:	9f 70       	andi	r25, 0x0F	; 15
  5c:	92 bb       	out	0x12, r25	; 18
  5e:	92 b3       	in	r25, 0x12	; 18
  60:	82 95       	swap	r24
  62:	80 7f       	andi	r24, 0xF0	; 240
  64:	89 2b       	or	r24, r25
  66:	82 bb       	out	0x12, r24	; 18
  68:	93 98       	cbi	0x12, 3	; 18
  6a:	85 e8       	ldi	r24, 0x85	; 133
  6c:	8a 95       	dec	r24
  6e:	f1 f7       	brne	.-4      	; 0x6c <sendhalfbyte+0x1e>
  70:	00 00       	nop
  72:	08 95       	ret

00000074 <sendbyte>:
  74:	cf 93       	push	r28
  76:	c8 2f       	mov	r28, r24
  78:	61 11       	cpse	r22, r1
  7a:	02 c0       	rjmp	.+4      	; 0x80 <sendbyte+0xc>
  7c:	92 98       	cbi	0x12, 2	; 18
  7e:	03 c0       	rjmp	.+6      	; 0x86 <sendbyte+0x12>
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	09 f4       	brne	.+2      	; 0x86 <sendbyte+0x12>
  84:	92 9a       	sbi	0x12, 2	; 18
  86:	8c 2f       	mov	r24, r28
  88:	82 95       	swap	r24
  8a:	8f 70       	andi	r24, 0x0F	; 15
  8c:	e0 df       	rcall	.-64     	; 0x4e <sendhalfbyte>
  8e:	8c 2f       	mov	r24, r28
  90:	de df       	rcall	.-68     	; 0x4e <sendhalfbyte>
  92:	cf 91       	pop	r28
  94:	08 95       	ret

00000096 <sendchar>:
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	ed df       	rcall	.-38     	; 0x74 <sendbyte>
  9a:	08 95       	ret

0000009c <setpos>:
  9c:	90 e4       	ldi	r25, 0x40	; 64
  9e:	69 9f       	mul	r22, r25
  a0:	80 0d       	add	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	e5 df       	rcall	.-54     	; 0x74 <sendbyte>
  aa:	08 95       	ret

000000ac <LCD_ini>:
  ac:	8f e2       	ldi	r24, 0x2F	; 47
  ae:	95 e7       	ldi	r25, 0x75	; 117
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_ini+0x4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_ini+0xa>
  b6:	00 00       	nop
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	c9 df       	rcall	.-110    	; 0x4e <sendhalfbyte>
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	9f e1       	ldi	r25, 0x1F	; 31
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_ini+0x14>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_ini+0x1a>
  c6:	00 00       	nop
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	c1 df       	rcall	.-126    	; 0x4e <sendhalfbyte>
  cc:	87 ec       	ldi	r24, 0xC7	; 199
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_ini+0x24>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_ini+0x2a>
  d6:	00 00       	nop
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	b9 df       	rcall	.-142    	; 0x4e <sendhalfbyte>
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_ini+0x34>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_ini+0x3a>
  e6:	00 00       	nop
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	b1 df       	rcall	.-158    	; 0x4e <sendhalfbyte>
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_ini+0x44>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_ini+0x4a>
  f6:	00 00       	nop
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	bb df       	rcall	.-138    	; 0x74 <sendbyte>
  fe:	8f ec       	ldi	r24, 0xCF	; 207
 100:	97 e0       	ldi	r25, 0x07	; 7
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_ini+0x56>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_ini+0x5c>
 108:	00 00       	nop
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	b2 df       	rcall	.-156    	; 0x74 <sendbyte>
 110:	8f ec       	ldi	r24, 0xCF	; 207
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_ini+0x68>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_ini+0x6e>
 11a:	00 00       	nop
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	a9 df       	rcall	.-174    	; 0x74 <sendbyte>
 122:	8f ec       	ldi	r24, 0xCF	; 207
 124:	97 e0       	ldi	r25, 0x07	; 7
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_ini+0x7a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_ini+0x80>
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <str_lcd>:
void clearlcd(){
	sendbyte(0x01, 0);
	_delay_us(1500);
}

void str_lcd(char str1[]){
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
	wchar_t n;
	for(n = 0; str1[n] != '\0'; n++) sendchar(str1[n]);
 136:	88 81       	ld	r24, Y
 138:	88 23       	and	r24, r24
 13a:	29 f0       	breq	.+10     	; 0x146 <str_lcd+0x16>
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	ab df       	rcall	.-170    	; 0x96 <sendchar>
 140:	89 91       	ld	r24, Y+
 142:	81 11       	cpse	r24, r1
 144:	fc cf       	rjmp	.-8      	; 0x13e <str_lcd+0xe>
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <port_ini>:
 * Author : Роман
 */ 
#include "main.h"

void port_ini(void){
	PORTD = 0x00;
 14c:	12 ba       	out	0x12, r1	; 18
	DDRD = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret

00000154 <main>:
}

int main(void){
	port_ini();
 154:	fb df       	rcall	.-10     	; 0x14c <port_ini>
	LCD_ini();
 156:	aa df       	rcall	.-172    	; 0xac <LCD_ini>
	setpos(0, 0);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	9f df       	rcall	.-194    	; 0x9c <setpos>
	str_lcd("Hello World!");
 15e:	80 e6       	ldi	r24, 0x60	; 96
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	e6 df       	rcall	.-52     	; 0x130 <str_lcd>
	setpos(0, 1);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	99 df       	rcall	.-206    	; 0x9c <setpos>
	str_lcd("String 2");
 16a:	8d e6       	ldi	r24, 0x6D	; 109
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	e0 df       	rcall	.-64     	; 0x130 <str_lcd>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x1c>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
